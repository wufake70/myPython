# _*_coding :utf-8 _*_
# @Time :2022/7/17 10:04
# @File : 13linux_shell命令
# @Project : python_base_payment

"""
一、文本传输
1.管道（符）
管道可以把一系列命令链接起来，可以将前面命令的输出作为后面的命令的输入 使用 '|'

2.输入重定向
输入重定向是把命令或可执行程序的标准输入重定向 到指定的文件中。
也就是 输入可以不来自键盘，而是来自一个指定的文件，输入重定向主要用于改变一个命令的输入源
输入重定向的一般形式‘’命令 < 文件名‘’
如:wc -l 001.py (查找文件内容有多少行)     返回 5 001.py
wc -l < 001.py （重定向输入)                  返回 5

3.输出重定向
输出重定向 把命令或可执行程序的标准输出或 标准错误 重新丁香岛指定文件中。
命令中 输出不显示在 屏幕上，而是写入到指定文件中，一遍后面 问题定位
格式： ‘命令 > 文件名’ > 表示 覆盖 ， >> 表示 追加
标准输出  echo
如: python3 001.py | xargs echo >> 001.py  (将Python执行后的结果，写入改文件中）
ls -l >> ***.txt       将当前路径下所有文件写入到 ***.txt 中

4.输出到终端

二、文件传输
1.设置 / 取消命令别名
alias 字母缩写='常用命令（比较长的)' （注意：等号两边 不能留有格）
unalias 字母缩写    即可取消 命令别名
以上 设置 只对当次 登录有效，不能久用,可以修改用户家目录下的 .bashrc 文件 如： 增加 alias cls='clear'  重启即可生效
root 用户 要在 root的家目录下

2.文件打包（压缩 解压）   tar命令
-c      建立新的压缩包（压缩文件必备）
-x      解压压缩包
-f      使用压缩包的名字，f 为 结尾必备参数
-v      输出相关信息
-z      调用gzip 来加压 ，与-x 连用 完成 .gz 的解压
-j      调用bzip2 来加压
-p      使用原文件的属性
格式： tar -cf 文件名.tar 要压缩的文件（可多个）      该压缩 文件的容量没变小 需要加压 使用 -z参数
tar -czf 文件名.tar.gz 压缩的文件       压缩文件容量减少

tar -xf 要解压文件.tar       只能解压 为加压的文件
tar -xzf 要解压文件.tar.gz   参数对应
注意：以上的解压 压缩命令 都只能在当前路径下完成、解压过程 需新建文件夹，
 将需解压文件移入新建文件夹中进行解压、避免相同文件 冲突

3.综合使用

三、硬链接 和 软链接
1.硬链接：是一个文件的一个或多个文件名。（后缀不一样）
(再说白点，所谓链接无非是把 文件名 和 计算机文件系统 使用的节点号 链接起来。
因此我们可以用多个文件名与同一个文件进行链接，这些文件名可以在同一目录或不同目录。)
链接文件 与 原文件 是同一个文件，修改其中一个，另一个都会改变

格式： ln 原文件名 硬链接文件名.hard

2.软链接：软链接又叫符号链接，这个文件包含了另一个文件的路径名。
可以是任意 文件或 目录，可以链接不同文件系统的文件。（类似 windows 中快捷方式）
格式：ln -s 原文件（夹）名 新建软链接文件名.soft
cd ***.soft         即可跳转 软链接的原文件夹中（如果是文件夹）
cat ***.soft        即可查看 软链接的原文件内容 （如果是文件）

三、进程管理
1.进程：正在运行的程序(计算机资源的调度）

2.一次性进程监视  ps命令
-u          按用户启动时间顺序 来显示进程
-a          显示用户的所有进程（前台进程）
-x          显示无终端控制的进程(后台运行进程）
-e          所有进程
ps -aux | grep vim  查看 当前被 vim 所占用的进程
返回信息的参数说明
USER        启动进程的用户
PID         进程的id号
%CPU        进程占用cpu百分比
%MEM        进程占用的物理内存b比
TTY         该进程在那个终端运行
STAT        运行状态（R 运行、S 睡眠、T 停止、s 包含子进程、

3.动态监测 进程   top命令（无参数下默认 每5秒 更新一次数据）
-d          设置更新的时间间隔
-n          显示更新的次数
-u          只显示指定用户进程信息

注意： 使用 q（quit） 退出显示

4.杀死 进程
使用快捷键 Ctrl+z（c） 可让前台执行的进程暂停
使用命令 ps -aux | grep vim  查看被 vim 占用的进程 （vim 换为 Python 即可后用）
kill -9 PID         杀死相关进程

四、shell
shell： 它接收来自用户输入的命令，然后将这些命令转化 一系列的 系统命令送到linux内核（core），
最终将结果返回给用户。（windows 虚拟出来的 dos系统）

1.更换 shell 外壳


2.脚本语言（shell不只是一种解释器，还是一种编程工具，成为脚本语言，还是 解释型 程序设计语言）
编译性语言 : 编译器 现将代码 翻译成机器可认识的 可执行文件（ 如：windows 的exe 文件 ，linux下二进制
可执行文件），执行效率 高
解释性语言：………………

3.编写shell 脚本
#！ /bin/bash
第一行 以'#!'开头 ，这是shell 脚本的标记，告诉系统使用什么解释器，后面是解释器的路径

'#'     注释符号
$0      表示文件名
$1      表示第一个参数
以此类推

4.shell 的运行
1.bash shell文件的路径
2.shell 文件第一行 必须 "#! /bin/bash",给用户添加可执行权限 （chmod u+x ***.sh),
使用 ./***.sh 即可执行









"""
































