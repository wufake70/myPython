# _*_coding :utf-8 _*_
# @Time :2022/8/6 20:48
# @File : 16_通信原理
# @Project : python_ubuntu_progress

"""
1.数据的传输 是通过 套接字 (socket)完成的
2.socket 遵循 七层网络模型 来进行数据的 封装与 解封装。
        网络模型        协议
        应用层         https，SMTP，FTP，
        会话层
        表示层
        传输层         TCP，UDP
        网络层         IP
        数据链路层
        物理层


    传输层协议
    TCP:
    1.通过 三次握手 协议建立 稳定链接
    2.应用数据分割 成最合适的数据块发送
    3.链接可靠 不一出现乱序，丢失现象
    4.耗时多 效率低 连接和检验都需要花不少时间

    UDP:
    1.一次性发送所有数据，无需建立连接
    2.服务器可以同时 发送多个 客户机
    3.没有检验，容易丢失 数据
    4.耗时少
    一般用与 直播 大型网络游戏


3.数据最终是通过 物理设备传输，以比特流的形式

4.数据 的寻址：
        IP(寻找主机) + port （对应端口）
    特殊 IP： 127.0.0.1        回环地址（代指本机）
              0.0.0.0          相当于 通配所有 IP
    IP 端口数：0~~2^16-1   大约 64000

5.(tcp协议)
  建立 链接 三次握手
  关闭 连接 四次挥手


6.数据流：  有序序列
7.分类: IO流 ，输入流 ，输出流
8.IO 操作（数据的收发）: 对数据流的进行输入 与 输出 操作
9.unix 系统中 全是文件(linux 也是)

10. socket传输 数据 就是 IO操作
    socket 对文件进行操作，对数据流进行操作
11.文件描述符(File descriptor) 简称   fd
    可以通过 fd 来区分 不同的 IO 流。



12.基本 IO模型:
    阻塞IO(BIO): 数据的接收时 发生阻塞(blocking),不能进行其他操作，
            CPU利用率 低；
            但不消耗，CPU资源，'CPU闲置'，能及时的 响应 每一个操作。
            input() 函数的调用 也是 BIO。

    非阻塞(NIO): 数据的接收时 不发生阻塞，可以进行其他操作。
            可以在同一 时间段 执行多个任务 '并发'。
            不能及时的 响应，有延迟，CPU占用率过高。

    IO多路复用(事件驱动):使用 IO多路复用选择器，注册多个任务，
             占用资源少，能够并发的执行多个任务
             linux 使用 epoll 事件驱动
13.
    并行: 同一时间点 同时运行多个程序(任务)
    并发: 同一时间段 同时运行多个程序(任务)。(分配 时间片)

    在Python 里 没有正真的 并行，都是 并发

























"""















